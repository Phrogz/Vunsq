/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.Presentation');
goog.provide('proto.Presentation.Act');

goog.require('jspb.Message');
goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('proto.Event');
goog.require('proto.Pattern');
goog.require('proto.Scene');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Presentation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Presentation.repeatedFields_, null);
};
goog.inherits(proto.Presentation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Presentation.displayName = 'proto.Presentation';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Presentation.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Presentation.prototype.toObject = function(opt_includeInstance) {
  return proto.Presentation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Presentation} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Presentation.toObject = function(includeInstance, msg) {
  var f, obj = {
    media: jspb.Message.getFieldWithDefault(msg, 1, ""),
    bpm: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    actsList: jspb.Message.toObjectList(msg.getActsList(),
    proto.Presentation.Act.toObject, includeInstance),
    patternsList: jspb.Message.toObjectList(msg.getPatternsList(),
    proto.Pattern.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Presentation}
 */
proto.Presentation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Presentation;
  return proto.Presentation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Presentation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Presentation}
 */
proto.Presentation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMedia(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setBpm(value);
      break;
    case 3:
      var value = new proto.Presentation.Act;
      reader.readMessage(value,proto.Presentation.Act.deserializeBinaryFromReader);
      msg.addActs(value);
      break;
    case 4:
      var value = new proto.Pattern;
      reader.readMessage(value,proto.Pattern.deserializeBinaryFromReader);
      msg.addPatterns(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Presentation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Presentation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Presentation} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Presentation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMedia();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBpm();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getActsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.Presentation.Act.serializeBinaryToWriter
    );
  }
  f = message.getPatternsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.Pattern.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Presentation.Act = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.Presentation.Act.oneofGroups_);
};
goog.inherits(proto.Presentation.Act, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Presentation.Act.displayName = 'proto.Presentation.Act';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.Presentation.Act.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.Presentation.Act.SceneOrEventCase = {
  SCENE_OR_EVENT_NOT_SET: 0,
  EVENT: 1,
  SCENE: 2
};

/**
 * @return {proto.Presentation.Act.SceneOrEventCase}
 */
proto.Presentation.Act.prototype.getSceneOrEventCase = function() {
  return /** @type {proto.Presentation.Act.SceneOrEventCase} */(jspb.Message.computeOneofCase(this, proto.Presentation.Act.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Presentation.Act.prototype.toObject = function(opt_includeInstance) {
  return proto.Presentation.Act.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Presentation.Act} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Presentation.Act.toObject = function(includeInstance, msg) {
  var f, obj = {
    event: (f = msg.getEvent()) && proto.Event.toObject(includeInstance, f),
    scene: (f = msg.getScene()) && proto.Scene.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Presentation.Act}
 */
proto.Presentation.Act.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Presentation.Act;
  return proto.Presentation.Act.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Presentation.Act} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Presentation.Act}
 */
proto.Presentation.Act.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Event;
      reader.readMessage(value,proto.Event.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    case 2:
      var value = new proto.Scene;
      reader.readMessage(value,proto.Scene.deserializeBinaryFromReader);
      msg.setScene(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Presentation.Act.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Presentation.Act.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Presentation.Act} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Presentation.Act.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Event.serializeBinaryToWriter
    );
  }
  f = message.getScene();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Scene.serializeBinaryToWriter
    );
  }
};


/**
 * optional Event event = 1;
 * @return {?proto.Event}
 */
proto.Presentation.Act.prototype.getEvent = function() {
  return /** @type{?proto.Event} */ (
    jspb.Message.getWrapperField(this, proto.Event, 1));
};


/** @param {?proto.Event|undefined} value */
proto.Presentation.Act.prototype.setEvent = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.Presentation.Act.oneofGroups_[0], value);
};


proto.Presentation.Act.prototype.clearEvent = function() {
  this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Presentation.Act.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Scene scene = 2;
 * @return {?proto.Scene}
 */
proto.Presentation.Act.prototype.getScene = function() {
  return /** @type{?proto.Scene} */ (
    jspb.Message.getWrapperField(this, proto.Scene, 2));
};


/** @param {?proto.Scene|undefined} value */
proto.Presentation.Act.prototype.setScene = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.Presentation.Act.oneofGroups_[0], value);
};


proto.Presentation.Act.prototype.clearScene = function() {
  this.setScene(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Presentation.Act.prototype.hasScene = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string media = 1;
 * @return {string}
 */
proto.Presentation.prototype.getMedia = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Presentation.prototype.setMedia = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional float bpm = 2;
 * @return {number}
 */
proto.Presentation.prototype.getBpm = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.Presentation.prototype.setBpm = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * repeated Act acts = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.Presentation.Act>}
 */
proto.Presentation.prototype.getActsList = function() {
  return /** @type{!Array.<!proto.Presentation.Act>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Presentation.Act, 3));
};


/** @param {!Array.<!proto.Presentation.Act>} value */
proto.Presentation.prototype.setActsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.Presentation.Act=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Presentation.Act}
 */
proto.Presentation.prototype.addActs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.Presentation.Act, opt_index);
};


proto.Presentation.prototype.clearActsList = function() {
  this.setActsList([]);
};


/**
 * repeated Pattern patterns = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.Pattern>}
 */
proto.Presentation.prototype.getPatternsList = function() {
  return /** @type{!Array.<!proto.Pattern>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Pattern, 4));
};


/** @param {!Array.<!proto.Pattern>} value */
proto.Presentation.prototype.setPatternsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.Pattern=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Pattern}
 */
proto.Presentation.prototype.addPatterns = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.Pattern, opt_index);
};


proto.Presentation.prototype.clearPatternsList = function() {
  this.setPatternsList([]);
};


