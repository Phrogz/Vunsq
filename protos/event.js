/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.Event');
goog.provide('proto.Event.BlendMode');

goog.require('jspb.Message');
goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('proto.Transform');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Event = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Event.repeatedFields_, null);
};
goog.inherits(proto.Event, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Event.displayName = 'proto.Event';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Event.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Event.prototype.toObject = function(opt_includeInstance) {
  return proto.Event.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Event} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Event.toObject = function(includeInstance, msg) {
  var f, obj = {
    effectId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    xform: (f = msg.getXform()) && proto.Transform.toObject(includeInstance, f),
    argsList: jspb.Message.getRepeatedFloatingPointField(msg, 3),
    blend: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Event}
 */
proto.Event.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Event;
  return proto.Event.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Event} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Event}
 */
proto.Event.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEffectId(value);
      break;
    case 2:
      var value = new proto.Transform;
      reader.readMessage(value,proto.Transform.deserializeBinaryFromReader);
      msg.setXform(value);
      break;
    case 3:
      var value = /** @type {!Array.<number>} */ (reader.readPackedFloat());
      msg.setArgsList(value);
      break;
    case 4:
      var value = /** @type {!proto.Event.BlendMode} */ (reader.readEnum());
      msg.setBlend(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Event.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Event.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Event} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Event.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEffectId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getXform();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Transform.serializeBinaryToWriter
    );
  }
  f = message.getArgsList();
  if (f.length > 0) {
    writer.writePackedFloat(
      3,
      f
    );
  }
  f = message.getBlend();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.Event.BlendMode = {
  SOURCE_OVER: 0,
  SOURCE_IN: 1,
  SOURCE_OUT: 2,
  SOURCE_ATOP: 3,
  DESTINATION_OVER: 4,
  DESTINATION_IN: 5,
  DESTINATION_OUT: 6,
  DESTINATION_ATOP: 7,
  LIGHTER: 8,
  COPY: 9,
  XOR: 10,
  MULTIPLY: 11,
  SCREEN: 12,
  OVERLAY: 13,
  DARKEN: 14,
  LIGHTEN: 15,
  COLOR_DODGE: 16,
  COLOR_BURN: 17,
  HARD_LIGHT: 18,
  SOFT_LIGHT: 19,
  DIFFERENCE: 20,
  EXCLUSION: 21,
  HUE: 22,
  SATURATION: 23,
  COLOR: 24,
  LUMINOSITY: 25
};

/**
 * optional uint32 effect_id = 1;
 * @return {number}
 */
proto.Event.prototype.getEffectId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Event.prototype.setEffectId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Transform xform = 2;
 * @return {?proto.Transform}
 */
proto.Event.prototype.getXform = function() {
  return /** @type{?proto.Transform} */ (
    jspb.Message.getWrapperField(this, proto.Transform, 2));
};


/** @param {?proto.Transform|undefined} value */
proto.Event.prototype.setXform = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.Event.prototype.clearXform = function() {
  this.setXform(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Event.prototype.hasXform = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated float args = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.Event.prototype.getArgsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 3));
};


/** @param {!Array.<number>} value */
proto.Event.prototype.setArgsList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.Event.prototype.addArgs = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.Event.prototype.clearArgsList = function() {
  this.setArgsList([]);
};


/**
 * optional BlendMode blend = 4;
 * @return {!proto.Event.BlendMode}
 */
proto.Event.prototype.getBlend = function() {
  return /** @type {!proto.Event.BlendMode} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.Event.BlendMode} value */
proto.Event.prototype.setBlend = function(value) {
  jspb.Message.setField(this, 4, value);
};


