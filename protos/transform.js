/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.Transform');
goog.provide('proto.Transform.Matrix2D');
goog.provide('proto.Transform.XY');

goog.require('jspb.Message');
goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Transform = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Transform, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Transform.displayName = 'proto.Transform';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Transform.prototype.toObject = function(opt_includeInstance) {
  return proto.Transform.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Transform} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Transform.toObject = function(includeInstance, msg) {
  var f, obj = {
    start: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    length: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    speed: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    rotate: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
    offset: (f = msg.getOffset()) && proto.Transform.XY.toObject(includeInstance, f),
    scale: (f = msg.getScale()) && proto.Transform.XY.toObject(includeInstance, f),
    repeat: jspb.Message.getFieldWithDefault(msg, 8, 0),
    matrix: (f = msg.getMatrix()) && proto.Transform.Matrix2D.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Transform}
 */
proto.Transform.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Transform;
  return proto.Transform.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Transform} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Transform}
 */
proto.Transform.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setStart(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLength(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSpeed(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRotate(value);
      break;
    case 6:
      var value = new proto.Transform.XY;
      reader.readMessage(value,proto.Transform.XY.deserializeBinaryFromReader);
      msg.setOffset(value);
      break;
    case 7:
      var value = new proto.Transform.XY;
      reader.readMessage(value,proto.Transform.XY.deserializeBinaryFromReader);
      msg.setScale(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRepeat(value);
      break;
    case 16:
      var value = new proto.Transform.Matrix2D;
      reader.readMessage(value,proto.Transform.Matrix2D.deserializeBinaryFromReader);
      msg.setMatrix(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Transform.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Transform.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Transform} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Transform.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStart();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getLength();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getSpeed();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getRotate();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getOffset();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.Transform.XY.serializeBinaryToWriter
    );
  }
  f = message.getScale();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.Transform.XY.serializeBinaryToWriter
    );
  }
  f = message.getRepeat();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = message.getMatrix();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.Transform.Matrix2D.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Transform.XY = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Transform.XY, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Transform.XY.displayName = 'proto.Transform.XY';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Transform.XY.prototype.toObject = function(opt_includeInstance) {
  return proto.Transform.XY.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Transform.XY} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Transform.XY.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    y: +jspb.Message.getFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Transform.XY}
 */
proto.Transform.XY.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Transform.XY;
  return proto.Transform.XY.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Transform.XY} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Transform.XY}
 */
proto.Transform.XY.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Transform.XY.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Transform.XY.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Transform.XY} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Transform.XY.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional float x = 1;
 * @return {number}
 */
proto.Transform.XY.prototype.getX = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.Transform.XY.prototype.setX = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional float y = 2;
 * @return {number}
 */
proto.Transform.XY.prototype.getY = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.Transform.XY.prototype.setY = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Transform.Matrix2D = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Transform.Matrix2D, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Transform.Matrix2D.displayName = 'proto.Transform.Matrix2D';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Transform.Matrix2D.prototype.toObject = function(opt_includeInstance) {
  return proto.Transform.Matrix2D.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Transform.Matrix2D} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Transform.Matrix2D.toObject = function(includeInstance, msg) {
  var f, obj = {
    a: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    b: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    c: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    d: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
    e: +jspb.Message.getFieldWithDefault(msg, 5, 0.0),
    f: +jspb.Message.getFieldWithDefault(msg, 6, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Transform.Matrix2D}
 */
proto.Transform.Matrix2D.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Transform.Matrix2D;
  return proto.Transform.Matrix2D.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Transform.Matrix2D} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Transform.Matrix2D}
 */
proto.Transform.Matrix2D.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setA(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setB(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setC(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setD(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setE(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setF(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Transform.Matrix2D.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Transform.Matrix2D.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Transform.Matrix2D} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Transform.Matrix2D.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getA();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getB();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getC();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getD();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getE();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getF();
  if (f !== 0.0) {
    writer.writeFloat(
      6,
      f
    );
  }
};


/**
 * optional float a = 1;
 * @return {number}
 */
proto.Transform.Matrix2D.prototype.getA = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.Transform.Matrix2D.prototype.setA = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional float b = 2;
 * @return {number}
 */
proto.Transform.Matrix2D.prototype.getB = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.Transform.Matrix2D.prototype.setB = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional float c = 3;
 * @return {number}
 */
proto.Transform.Matrix2D.prototype.getC = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.Transform.Matrix2D.prototype.setC = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional float d = 4;
 * @return {number}
 */
proto.Transform.Matrix2D.prototype.getD = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.Transform.Matrix2D.prototype.setD = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional float e = 5;
 * @return {number}
 */
proto.Transform.Matrix2D.prototype.getE = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.Transform.Matrix2D.prototype.setE = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional float f = 6;
 * @return {number}
 */
proto.Transform.Matrix2D.prototype.getF = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.Transform.Matrix2D.prototype.setF = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional float start = 1;
 * @return {number}
 */
proto.Transform.prototype.getStart = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.Transform.prototype.setStart = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional float length = 2;
 * @return {number}
 */
proto.Transform.prototype.getLength = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.Transform.prototype.setLength = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional float speed = 3;
 * @return {number}
 */
proto.Transform.prototype.getSpeed = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.Transform.prototype.setSpeed = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional float rotate = 4;
 * @return {number}
 */
proto.Transform.prototype.getRotate = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.Transform.prototype.setRotate = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional XY offset = 6;
 * @return {?proto.Transform.XY}
 */
proto.Transform.prototype.getOffset = function() {
  return /** @type{?proto.Transform.XY} */ (
    jspb.Message.getWrapperField(this, proto.Transform.XY, 6));
};


/** @param {?proto.Transform.XY|undefined} value */
proto.Transform.prototype.setOffset = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.Transform.prototype.clearOffset = function() {
  this.setOffset(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Transform.prototype.hasOffset = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional XY scale = 7;
 * @return {?proto.Transform.XY}
 */
proto.Transform.prototype.getScale = function() {
  return /** @type{?proto.Transform.XY} */ (
    jspb.Message.getWrapperField(this, proto.Transform.XY, 7));
};


/** @param {?proto.Transform.XY|undefined} value */
proto.Transform.prototype.setScale = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.Transform.prototype.clearScale = function() {
  this.setScale(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Transform.prototype.hasScale = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional uint32 repeat = 8;
 * @return {number}
 */
proto.Transform.prototype.getRepeat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.Transform.prototype.setRepeat = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional Matrix2D matrix = 16;
 * @return {?proto.Transform.Matrix2D}
 */
proto.Transform.prototype.getMatrix = function() {
  return /** @type{?proto.Transform.Matrix2D} */ (
    jspb.Message.getWrapperField(this, proto.Transform.Matrix2D, 16));
};


/** @param {?proto.Transform.Matrix2D|undefined} value */
proto.Transform.prototype.setMatrix = function(value) {
  jspb.Message.setWrapperField(this, 16, value);
};


proto.Transform.prototype.clearMatrix = function() {
  this.setMatrix(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Transform.prototype.hasMatrix = function() {
  return jspb.Message.getField(this, 16) != null;
};


